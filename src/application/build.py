from modules import *
import pkgutil
import re

def make_views():
    view_str = "# This is an autogenerated file. DO NOT EDIT!!!\n\n"
    view_str += "from flask import Response, make_response, Request, request, session, stream_with_context\n"
    view_str += "from application import application\n"
    view_str += "import main\n"
    view_str += "from modules.cb_utilities import *\n"
    view_str += "from modules import *\n\n"
    view_str += "@application.route('/metrics', methods=['GET'])\n"
    view_str += "@application.route('/', methods=['GET', 'POST'])\n"
    view_str += "def metrics():\n"
    view_str += "\tnum_samples = 60\n"
    view_str += "\tif request.args.get('num_samples'):\n"
    view_str += "\t\tnum_samples = int(request.args.get('num_samples'))\n"
    view_str += "\tresult_set = 60\n"
    view_str += "\tif application.config['CB_RESULTSET']:\n"
    view_str += "\t\tresult_set = application.config['CB_RESULTSET']\n"
    view_str += "\t_value = main.get_metrics(\n"
    view_str += "\t\tapplication.config['CB_DATABASE'],\n"
    view_str += "\t\tapplication.config['CB_USERNAME'],\n"
    view_str += "\t\tapplication.config['CB_PASSWORD'],\n"
    view_str += "\t\tnum_samples,\n"
    view_str += "\t\tresult_set)\n\n"
    view_str += "\tif application.config['CB_STREAMING']:\n"
    view_str += "\t\tdef generate():\n"
    view_str += "\t\t\tfor row in _value:\n"
    view_str += "\t\t\t\tyield(row + '\\n')\n"
    view_str += "\t\treturn Response(stream_with_context(generate()), mimetype='text/plain')\n"
    view_str += "\telse:\n"
    view_str += "\t\tmetrics_str = '\\n'\n"
    view_str += "\t\tmetrics_str = metrics_str.join(_value)\n"
    view_str += "\t\treturn Response(metrics_str, mimetype='text/plain')\n\n"
    imports = [name for _, name, _ in pkgutil.iter_modules(['modules'])]
    for module in imports:
        try:
            my_view = eval(module).view()

            view_str += "@application.route('/metrics/{}', methods={})\n".format(my_view.name, str(my_view.methods))
            view_str += "@application.route('/{}', methods={})\n".format(my_view.name, str(my_view.methods))
            view_str += "def {}():\n".format(my_view.name)
            view_str += "\t\'\'\'{}\'\'\'\n".format(re.sub(r"\n", "\n\t", re.sub(r" +", " ", my_view.comment)))
            # self.filters = [{"variable":"nodes","type":"default", "name": "nodes_list", "value":[]}]
            for filter in my_view.filters:
                if filter['type'] == "default":
                    view_str += "\t{} = {}\n".format(filter['name'], filter['value'])
                    filter_str = "\tif request.args.get('{}'):\n".format(filter['variable'])
                    filter_str += "\t\t{}_str = request.args.get('{}')\n".format(filter['variable'], filter['variable'])
                    filter_str += "\t\t{}_str = {}_str.replace('[', '').replace(']', '').replace(' ', '').replace(':8091', '')\n".format(filter['variable'], filter['variable'])
                    filter_str += "\t\t{} = {}_str.split(',')\n".format(filter['name'], filter['variable'])
                    view_str += filter_str
                elif filter['type'] == "bool":
                    view_str += "\t{} = {}\n".format(filter['name'], filter['value'])
                    filter_str = "\tif request.args.get('{}'):\n".format(filter['name'])
                    filter_str += "\t\t{} = str2bool(request.args.get('{}'))\n".format(filter['name'], filter['name'])
                    view_str += filter_str
                elif filter['type'] == "int":
                    view_str += "\t{} = {}\n".format(filter['name'], filter['value'])
                    filter_str = "\tif request.args.get('{}'):\n".format(filter['name'])
                    filter_str += "\t\t{} = int(request.args.get('{}'))\n".format(filter['name'], filter['name'])
                    view_str += filter_str
            view_str += "\tresult_set = 60\n"
            view_str += "\tif application.config['CB_RESULTSET']:\n"
            view_str += "\t\tresult_set = application.config['CB_RESULTSET']\n"
            view_str += "\t_value = {}.run(\n".format(module)
            view_str += "\t\tapplication.config['CB_DATABASE'],\n"
            view_str += "\t\tapplication.config['CB_USERNAME'],\n"
            view_str += "\t\tapplication.config['CB_PASSWORD'], \n"
            for filter in my_view.filters:
                view_str += "\t\t{},\n".format(str(filter['name']))
            view_str += "\t\tresult_set"
            view_str += ")\n"
            view_str += "\tif application.config['CB_STREAMING']:\n"
            view_str += "\t\tdef generate():\n"
            view_str += "\t\t\tfor row in _value:\n"
            view_str += "\t\t\t\tyield(row + '\\n')\n"
            view_str += "\t\treturn Response(stream_with_context(generate()), mimetype='text/plain')\n"
            view_str += "\telse:\n"
            view_str += "\t\tmetrics_str = '\\n'\n"
            view_str += "\t\tmetrics_str = metrics_str.join(_value)\n"
            view_str += "\t\treturn Response(metrics_str, mimetype='text/plain')\n\n"
            view_str += "\n"
        except Exception as e:
            print(e)
    with open("views.py", "w+") as views:
        views.write(view_str)

def make_main():
    main_str = "#! /usr/bin/python\n"
    multiline_comment = '''\'\'\'This is the main script for the python exporter for exporting Couchbase
                    RestAPI metrics to Prometheus format.\'\'\'\n\n'''
    main_str += re.sub(r" +", " ", multiline_comment)
    main_str += "# pylint: disable=C0303, C0325, C1801\n\n"

    main_str += "URL = ''\n"
    main_str += "USER = ''\n"
    main_str += "PASSWD = ''\n\n"

    main_str += "# This is an autogenerated file. DO NOT EDIT BELOW THIS LINE!!!\n\n"

    main_str += "from modules import *\n\n"

    #These are the minimum requirements for the main method to work
    main_str += "def get_metrics(url='', user='', passwrd='', num_samples=60, result_set=60):\n"
    main_str += "\turl = cb_cluster.check_cluster(url, user, passwrd)\n"
    main_str += "\tcluster_values = cb_cluster._get_cluster(url, user, passwrd, [])\n"
    main_str += "\tif num_samples != 60:\n"
    main_str += "\t\tresult_set = num_samples\n"
    main_str += "\tmetrics = cluster_values['metrics']\n"
    main_str += "\tindex_buckets = cb_bucket._get_index_buckets(url, user, passwrd)\n"
    main_str += "\tbuckets = cb_bucket._get_buckets(url, user, passwrd)\n\n"

    #These are the auto generated metrics based on the view classes in modules
    imports = [name for _, name, _ in pkgutil.iter_modules(['modules'])]
    for module in imports:
        try:
            # if module == "cb_node_exporter":
                my_view = eval(module).view()
                if my_view.service_identifier == None:
                    pass
                elif my_view.exclude == True:
                    pass
                elif my_view.service_identifier == False:
                    main_str += "\t{}_metrics = {}._get_metrics(\n".format(my_view.name, module)
                    a_str = []
                    for entry in my_view.inputs:
                        a_str.append(entry['value'])
                    c_str = "{})".format(", ".join(a_str))
                    main_str += "\t\t{}\n".format(c_str)
                    main_str += "\tmetrics = metrics + {}_metrics['metrics']\n\n".format(my_view.name)
                else:
                    main_str += "\tif len(cluster_values['serviceNodes']['{}']) > 0:\n".format(my_view.service_identifier)
                    main_str += "\t\t{}_metrics = {}._get_metrics(\n".format(my_view.name, module)
                    a_str = []
                    for entry in my_view.inputs:
                        a_str.append(entry['value'])
                    c_str = "{})".format(", ".join(a_str))
                    main_str += "\t\t\t{}\n".format(c_str)
                    main_str += "\t\tmetrics = metrics + {}_metrics['metrics']\n\n".format(my_view.name)
        except Exception as e:
            print(e)
    main_str += "\treturn(metrics)\n\n"
    main_str += "if __name__ == '__main__':\n"
    main_str += "\tprint(get_metrics(URL, USER, PASSWD))\n"

    with open("main.py", "w+") as main:
        main.write(main_str)

if __name__ == "__main__":
    make_views()
    make_main()
